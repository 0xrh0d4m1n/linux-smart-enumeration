#!/bin/posh
# shellcheck disable=1003,1091,2006,2016,2034,2039
# vim: set ts=2 sw=2 sts=2 fdm=marker fmr=#(,#) et:
#
# doc:
#
#  Copy this file to a new one with the same name of the cve to test, all in
# lowercase (i.e.: cve-2014–6271.sh).
#  Then add the code for the functions shown here. **ALL** functions must appear
# in the new created file, however the ones marked as 'optional' can be left
# with the same code than in 'skel.sh'. Inside the function, declare all the
# variables as 'local' (i.e.: local vuln_version="1.2.3")
#
#  NOTE: You can use here, functions and variables implemented in 'lse.sh':
#   * lse_get_pkg_version: Get package version supplying package name
#   * lse_is_version_bigger: Check if version in $1 is bigger than the $2
#   * $lse_arch: System architecture
#   * $lse_distro_codename: The linux distribution code name (ubuntu, debian,
#      opsuse, centos, redhat, fedora)
#   * $lse_linux: Kernel version
#   * Colors
#  XXX: Check the definitions in 'lse.sh' to better understand what they do and
#       how they work
#
################################################################################
## RULES:
##  * Do NOT cause any harm with the tests
##  * Try to be as accurate as possible, trying to detect patched versions from
##    distro package versions. Try to minimize false positives.
##  * The script must be POSIX compliant. Test it with 'posh' shell.
################################################################################


# lse_cve_level: 0 if leads to a privilege escalation; 1 for other CVEs
lse_cve_level=0

# lse_cve_id: CVE id in lowercase (i.e.: cve-2014–6271)
lse_cve_id="cve-2021-3156"

# lse_cve_description: Short. Not more than 52 characters long.
#__________________="vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv"
lse_cve_description="Sudo Baron Samedit vulnerability"

# Code retrieved with 'declare -f' by the packaging bash script
lse_cve_test() { #(
  local vulnerable=false
  local sudo
  local sudo_version
  local v2
  sudo="$(command -v sudo)"
  if [ -n "$sudo" ]; then
    vulnerable=true
    sudo_version="$(sudo --version | head -n1 | cut -d ' ' -f 3)"
    v2="$(echo "$sudo_version" | cut -d. -f2)"
    # only 1.8.2 to 1.8.31p2 is vulnerable
    if lse_is_version_bigger 1.8.2 "$sudo_version"; then
      exit 1
    fi
    if [ "$v2" = 8 ] && lse_is_version_bigger "$sudo_version" 1.8.31p2; then
      exit 1
    fi
    # only 1.9.0 to 1.9.5p1 is vulnerable
    if lse_is_version_bigger "$sudo_version" 1.9.5p1; then
      exit 1
    fi
  fi
  $vulnerable && echo "Vulnerable! sudo version: $sudo_version"
} #)
